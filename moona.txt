<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Terminal Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;700&display=swap');
        body {
            font-family: 'IBM Plex Mono', monospace;
            background-color: #0b0c10;
            color: #c5c6c7;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden; /* Prevent body scroll */
        }
        .terminal-window {
            background-color: #1f2833;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.5), 0 4px 6px -2px rgba(0, 0, 0, 0.25);
            max-width: 900px;
            width: 95%;
            height: 70vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid #45a29e;
        }
        .terminal-header {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: #1f2833;
            border-bottom: 1px solid #45a29e;
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
        }
        .terminal-header-dots {
            display: flex;
            gap: 0.5rem;
        }
        .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            cursor: pointer;
        }
        .dot.red { background-color: #ff5f57; }
        .dot.yellow { background-color: #ffbd2e; }
        .dot.green { background-color: #28c940; }
        .terminal-content {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-size: 0.9rem;
            line-height: 1.5;
            scrollbar-width: thin;
            scrollbar-color: #45a29e #1f2833;
        }
        .terminal-content::-webkit-scrollbar {
            width: 8px;
        }
        .terminal-content::-webkit-scrollbar-track {
            background: #1f2833;
        }
        .terminal-content::-webkit-scrollbar-thumb {
            background-color: #45a29e;
            border-radius: 4px;
            border: 2px solid #1f2833;
        }
        .terminal-input-line {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
            border-top: 1px solid #45a29e;
            background-color: #1f2833;
        }
        .prompt {
            color: #66fcf1;
            margin-right: 0.5rem;
            font-weight: bold;
        }
        .terminal-input {
            background-color: transparent;
            border: none;
            outline: none;
            color: #c5c6c7;
            flex-grow: 1;
            caret-color: transparent;
        }
        .cursor {
            display: inline-block;
            background-color: #66fcf1;
            width: 0.5rem;
            height: 1rem;
            margin-left: 0.25rem;
            animation: blink 1s step-end infinite;
        }
        @keyframes blink {
            from, to { visibility: hidden; }
            50% { visibility: visible; }
        }
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #0b0c10;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            transition: opacity 1s ease-out;
        }
        .loading-bar-container {
            width: 300px;
            height: 8px;
            background-color: #1f2833;
            border-radius: 4px;
            border: 1px solid #45a29e;
            overflow: hidden;
            margin-top: 1rem;
        }
        .loading-bar {
            height: 100%;
            width: 0%;
            background-color: #66fcf1;
            transition: width 0.5s ease-in-out;
        }
    </style>
</head>
<body>

    <!-- Loading Screen -->
    <div id="loading-screen" class="loading-screen">
        <div class="text-lg font-bold text-gray-400">Loading...</div>
        <div class="loading-bar-container">
            <div id="loading-bar" class="loading-bar"></div>
        </div>
    </div>

    <!-- Main Terminal Interface -->
    <div id="terminal-container" class="terminal-window hidden opacity-0 transition-opacity duration-1000 ease-in">
        <div class="terminal-header">
            <div class="terminal-header-dots">
                <div class="dot red"></div>
                <div class="dot yellow"></div>
                <div class="dot green"></div>
            </div>
            <div class="flex-grow text-center text-sm text-gray-400">archie-terminal</div>
            <div class="text-right text-sm text-gray-400">
                <i class="fas fa-terminal"></i>
            </div>
        </div>
        <div id="terminal-output" class="terminal-content">
            <!-- Terminal output will be added here by JavaScript -->
        </div>
        <div class="terminal-input-line">
            <span class="prompt">guest@archie:$</span>
            <input id="terminal-input" type="text" class="terminal-input" autofocus>
            <span id="cursor" class="cursor"></span>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const loadingScreen = document.getElementById('loading-screen');
            const loadingBar = document.getElementById('loading-bar');
            const terminalContainer = document.getElementById('terminal-container');
            const outputElement = document.getElementById('terminal-output');
            const inputElement = document.getElementById('terminal-input');
            const cursorElement = document.getElementById('cursor');

            const commands = [
                { command: 'Initializing connection...', output: 'Connection established. Welcome, guest.' },
                { command: 'Checking system status...', output: 'All systems online. Security protocol active.' },
                { command: 'Establishing secure communication...', output: 'Secure channel is now open. Type \'help\' for a list of available commands.' }
            ];

            const commandHistory = [];
            let historyIndex = -1;
            let currentLine = 0;
            let isTyping = false;
            
            // Function to simulate the typing effect
            async function typeLine(text, element) {
                isTyping = true;
                return new Promise(resolve => {
                    let charIndex = 0;
                    const interval = setInterval(() => {
                        element.innerHTML += text[charIndex];
                        charIndex++;
                        if (charIndex === text.length) {
                            clearInterval(interval);
                            element.innerHTML += '\n'; // Add a newline after each line
                            isTyping = false;
                            resolve();
                        }
                    }, 50); // Adjust typing speed here
                });
            }

            // Simulates a command being entered and processed
            async function simulateCommand(command, output) {
                const commandLine = document.createElement('div');
                commandLine.className = 'flex';
                const commandPrompt = document.createElement('span');
                commandPrompt.className = 'prompt';
                commandPrompt.innerText = 'guest@archie:$ ';
                const commandText = document.createElement('span');
                commandLine.append(commandPrompt, commandText);
                outputElement.appendChild(commandLine);

                await typeLine(command, commandText);

                const outputLine = document.createElement('div');
                outputLine.className = 'text-gray-400';
                outputElement.appendChild(outputLine);

                await typeLine(output, outputLine);
            }

            // Command processing logic
            async function processCommand(input) {
                const command = input.trim().toLowerCase();
                const outputLine = document.createElement('div');
                outputElement.appendChild(outputLine);
                outputElement.scrollTop = outputElement.scrollHeight;

                let response;
                switch (command) {
                    case 'help':
                        response = `
Available commands:
  help       - Shows this help message.
  about      - Learn about Archie Terminal.
  clear      - Clears the terminal screen.
  contact    - Provides contact information.
                        `;
                        break;
                    case 'about':
                        response = `
Archie Terminal is a pioneer in sustainable petroleum storage and transport.
We operate over 25 global terminals with a capacity of over 90 million barrels.
Our mission is to set new standards for safety, efficiency, and environmental responsibility.
                        `;
                        break;
                    case 'contact':
                        response = `
You can contact us via email at info@archieterminal.com or visit our website at archieterminal.com.
                        `;
                        break;
                    case 'clear':
                        outputElement.innerHTML = '';
                        response = 'Terminal cleared.';
                        break;
                    case '':
                        response = '';
                        break;
                    default:
                        response = `Command not found: "${command}". Type 'help' to see available commands.`;
                        break;
                }
                await typeLine(response, outputLine);
                outputElement.scrollTop = outputElement.scrollHeight;
            }

            // Main initialization and typing sequence
            async function startTerminal() {
                for (const cmd of commands) {
                    await simulateCommand(cmd.command, cmd.output);
                }
                inputElement.focus();
                // Add the initial prompt line
                const finalPrompt = document.createElement('div');
                finalPrompt.innerHTML = '<span class="prompt">guest@archie:$</span>';
                outputElement.appendChild(finalPrompt);
            }
            
            // Handle user input
            inputElement.addEventListener('keydown', async (e) => {
                if (e.key === 'Enter' && !isTyping) {
                    e.preventDefault();
                    const input = inputElement.value;
                    if (input) {
                        commandHistory.push(input);
                        historyIndex = commandHistory.length;
                    }
                    
                    const userOutput = document.createElement('div');
                    userOutput.className = 'text-gray-400';
                    userOutput.innerHTML = `<span class="prompt">guest@archie:$</span> ${input}`;
                    outputElement.appendChild(userOutput);

                    inputElement.value = '';
                    inputElement.disabled = true;
                    cursorElement.style.visibility = 'hidden';

                    await processCommand(input);

                    inputElement.disabled = false;
                    cursorElement.style.visibility = 'visible';
                    inputElement.focus();
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (historyIndex > 0) {
                        historyIndex--;
                        inputElement.value = commandHistory[historyIndex];
                    }
                } else if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (historyIndex < commandHistory.length - 1) {
                        historyIndex++;
                        inputElement.value = commandHistory[historyIndex];
                    } else if (historyIndex === commandHistory.length - 1) {
                        historyIndex++;
                        inputElement.value = '';
                    }
                }
            });

            // Simulate loading bar and fade in the terminal
            let loadingProgress = 0;
            const loadingInterval = setInterval(() => {
                loadingProgress += 5;
                loadingBar.style.width = loadingProgress + '%';
                if (loadingProgress >= 100) {
                    clearInterval(loadingInterval);
                    loadingScreen.style.opacity = '0';
                    setTimeout(() => {
                        loadingScreen.style.display = 'none';
                        terminalContainer.classList.remove('hidden');
                        setTimeout(() => {
                            terminalContainer.style.opacity = '1';
                            startTerminal();
                        }, 50);
                    }, 1000);
                }
            }, 50);
        });
    </script>
</body>
</html>
